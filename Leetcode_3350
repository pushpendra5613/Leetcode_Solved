class Solution {
public:
    int maxIncreasingSubarrays(vector<int>& nums) {
        int ans = 1;
        int n = nums.size();
        vector<int> dp(n,1);

        for(int i=1;i<n;i++) {
            if(nums[i] > nums[i-1]) dp[i] = dp[i-1] + 1;
            else dp[i] = 1;
            int val = dp[i]/2;
            ans = max(ans , val);
        }
        // for(auto ele: dp )cout<<ele<<" ";
        vector<int> v;
        for(int i=0;i<n-1;i++) {
            if(dp[i+1] == 1) v.push_back(i);
        }
        v.push_back(n-1);
        // cout<<endl;
        // for(auto ele: v) cout<<ele<<" ";
        for(int i=0;i<v.size()-1;i++) {
            ans = max(ans , min(dp[v[i]],dp[v[i+1]]));
        }
        return ans;
    }
};
/*
    2 5 7 8 9 | 2 3 4 | 3 | 1


*/
